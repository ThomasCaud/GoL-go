# Binaries for programs and plugins
*.exe
*.exe~
*.dll
*.so
*.dylib

# Test binary, build with `go test -c`
*.test

# Output of the go coverage tool, specifically when used with LiteIDE
*.out

# IDE
.idea

let w = 15;
let columns;
let rows;
let board;
let ant;
let nbMove = 0;
let obstacles = [];
let LIFE_STEP = 3;
let LIFE_DISTANCE_MIN = 5;
let LIFE_DISTANCE_MAX = 40;

class Obstacle {
  constructor() {
    this.startX = 10;
    this.startY = 10;
    this.endX = 200;
    this.endY = 200;
  }

  draw() {
    fill(0);
    line(this.startX, this.startY, this.endX, this.endY);
  }
}

class Life {
  constructor(x, y, dir) {
    this.posX = x;
    this.posY = y;
    this.speedX = cos(dir);
    this.speedY = sin(dir);
  }

  updatePosition() {
    this.posX += LIFE_STEP * this.speedX;
    this.posY += LIFE_STEP * this.speedY;
  }
}

function calculateColumnsAndRows() {
  columns = floor(width / w);
  rows = floor(height / w);
}

function setupBoards() {
  board = new Array(columns);
  for (let i = 0; i < columns; i++) {
    board[i] = new Array(rows);
  }
}

function setupObstacles() {
  obstacles.push(new Obstacle());
}

function setup() {
  createCanvas(720, 400);
  calculateColumnsAndRows();
  setupObstacles();
  ant = new Ant();
  setupBoards();
  init();
}

function drawAnt(caseValue, i, j) {
  fill(0);

  line((i + 1) * w, (j + 1) * w, i * w, j * w);
  line((i + 1) * w, j * w, i * w, (j + 1) * w);
}

function drawNbMove() {
  textSize(32);
  fill('red');
  text(nbMove, 10, 30);
}

function drawObstacles() {
  for (let i = 0; i < obstacles.length; i++) {
    obstacles[i].draw();
  }
}

function draw() {
  background(255);
  frameRate(40);
  generate();
  for (let i = 0; i < columns; i++) {
    for (let j = 0; j < rows; j++) {


      if (ant.x == i && ant.y == j) {
        drawAnt(board[i][j], i, j);
      }
    }
  }
  drawObstacles();
  nbMove++;
  drawNbMove();

}

function mousePressed() {
  init();
}

function init() {
  for (let i = 0; i < columns; i++) {
    for (let j = 0; j < rows; j++) {
      board[i][j] = 1;
    }
  }
}

function generate() {
  ant.move(board[ant.x][ant.y]);
  board[ant.x][ant.y] = !board[ant.x][ant.y];
}
